= Notes

This is a development log for the operating system. So it is a record
of my attempt to learn about the ARM architecture and play with ideas
in operating systems.

Notes are written in reverse order.

== Up and running using Debian

I tried berryboot but I couldn't see a way to make it boot into a
custom kernel. So instead I'm going to try seeing if I can load a
kernel from linux and hijack the system that way.

It should also prove useful to know a bit more about how kernel
modules work anyway.

So I'm running Debian after installing it iwht berryboot. I installed
emacs and git and checked out my github repo.

Next thing to try is see how fast I can scan memory. 200MB/s which is about
1/6th the speed of my desktop. Pretty slow.

  mkdir -p build
  gcc -O -o build/memtest src/memtest.c
  build/memtest

I need the kernel headers installed

  sudo apt-get install linux-headers-3.2.0-3-rpi

I also installed emacs and ruby

  sudo apt-get install emacs ruby

Compiling the basic module ends in failure because this Rasbian system
can't find kernel sources. They don't seem to be in the repo.

I think I should go back to the idea of trying to get the serial port
working however that involves buying the right usb to serial
device. The pi seems quite a bit harder to work with than beagle bone
was at least for bootstrapping.






== Start at the beginning

Execution being at the top of the vector table, vector_table.s. This
loads the reset function pointer into the program count (a way to jump
I guess) and proceeds to reset.s.

Reset.s essentially sets up a number of stacks. The jumps into the c
entry point.

I guess that B . is a no-op operation. B means branch.

pl011.c provides code to access the UART. 

  http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183f/DDI0183.pdf

DMB tells the compiler not to re-order reads. It is used while reading from
the serial port.

  http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489c/CIHGHHIE.html

Here is a list of the ARM instruction set. 

  http://infocenter.arm.com/help/topic/com.arm.doc.qrc0001m/QRC0001_UAL.pdf

The function pl011_putc busy waits. That could be useful as a
debugging technique but I guess is bad form for an operating system.

The location of the UART registers is hard coded in platorm.h. It is different on the
Raspberry PI than on the qemu version.

The pl011 responds has an interupt which is configured when the device
is initialized.

The ARM and particularly the pl011 seem to have DMA's. It would seem that maybe
by configuring a DMA the CPU could be freed from having to do the puts for each
character as soon as the UART buffer becomes free.

There an memory management system somewhere on this system. It must
affect access to devices and such.

Here is a link to a set of slides about ARM

  http://simplemachines.it/doc/arm_inst.pdf

== Learning from Lambda-Pi

I'm learning from LambdaPi. The source for LambdaPi is in the
lambda-pi-src directory. I moved the files about a bit but otherwise
have left the source rather unchanged.

My startings of an OS, which are copied in parts from LambdaPi are in 
the src directory.

== Patching QEMU

Date: 2011-12-18 15:26:53 -0800

So QEMU was seg faulting when I tried to run my OS. I did a debug
build of qemu and caught the seg fault. It is because the machine
configuration has more serial devices than are permitted by a constant
in QEMU, kind of weird, anyway when I increased that constant, like
magic my OS just works.

Here is the patch for QEMU.

  diff --git a/sysemu.h b/sysemu.h
  index 22cd720..783909b 100644
  --- a/sysemu.h
  +++ b/sysemu.h
  @@ -153,7 +153,7 @@ int do_pcie_aer_inejct_error(Monitor *mon,
   
   /* serial ports */ 
   
  -#define MAX_SERIAL_PORTS 4
  +#define MAX_SERIAL_PORTS 8
   
   extern CharDriverState *serial_hds[MAX_SERIAL_PORTS];

== STTY

Date: 2011-12-18 15:26:44 -0800

QEMU messes with the terminal. To restore the terminal after it has
been messed with by QEMU I run

  stty '6d02:5:4bf:8a3b:3:1c:7f:15:4:0:1:ff:11:13:1a:ff:12:f:17:16:ff:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0'

which restore the terminal defaults.

== Syntax of this file

Date: 2011-12-18 15:26:41 -0800

One day it would make sense to write a program that will combine these
notes into a website. I will however refrain from doing that at
present as it will take time away from OS tasks and the text
representation is reasonable.

== Getting Better at Emacs Lisp

Date: 2011-12-18 15:26:38 -0800

Another constant distraction is the desire to have some handy
functions written in emacs lisp. For example adding the date to these
entries.

  (global-set-key "\C-cd" 'insert-date)
  (defun insert-date () "insert the current date" (interactive) 
    (shell-command "echo Date: $(date +'%Y-%m-%d %H:%M:%S %z')" t))

== RaspberryPi Updates

Date: 2011-12-18 15:26:35 -0800

A new expansion board was released. Still no word of when the
Raspberry Pi will ship.

== UART Device

Date: 2011-12-18 20:36:17 -0800

Programming the UART device brings up the question of how to do
threads and processes and how to share devices. The UART device is
interesting because it harks back to the early days of computing with
tele-type devices.

The UART is also a good place to start because it is quite a bit more
simple than other devices such as a universal serial port. 

The UART in the simulated machine is a pl011. This device is
documented here: 

  http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183f/DDI0183.pdf

There seem to be a number of serial ports evidenced by the fact that I
had to increase the number of them beyond 4. Devices registers are
located at fixed points in phsical memory. For example in versatilepb
there is one located at the address 0x101f1000. 

There are other devices described in
 
  ./hw/versatilepb.c

in the QEMU source. Also mentioned are a pl050 keyboard and mouse
described here

  http://infocenter.arm.com/help/topic/com.arm.doc.ddi0143c/DDI0143.pdf

and pl190 vector interupt controller described here

 http://infocenter.arm.com/help/topic/com.arm.doc.ddi0181e/DDI0181.pdf

There are 4 pl011, and a pl080 DMA controller as well as an pl804 dual
timer module. There is an LCD controller pl110 and pl181 mulimedia
controller. There is a pl031 realtime clock and a pl041 advanced audio
codec interface.

The memory map is as follows.

  0x10000000 System registers.
  0x10001000 PCI controller config registers.
  0x10002000 Serial bus interface.
   0x10003000 Secondary interrupt controller.
  0x10004000 AACI (audio).
   0x10005000 MMCI0.
   0x10006000 KMI0 (keyboard).
   0x10007000 KMI1 (mouse).
  0x10008000 Character LCD Interface.
   0x10009000 UART3.
  0x1000a000 Smart card 1.
   0x1000b000 MMCI1.
   0x10010000 Ethernet.
  0x10020000 USB.
  0x10100000 SSMC.
  0x10110000 MPMC.
   0x10120000 CLCD Controller.
   0x10130000 DMA Controller.
   0x10140000 Vectored interrupt controller.
  0x101d0000 AHB Monitor Interface.
  0x101e0000 System Controller.
  0x101e1000 Watchdog Interface.
  0x101e2000 Timer 0/1.
  0x101e3000 Timer 2/3.
  0x101e4000 GPIO port 0.
  0x101e5000 GPIO port 1.
  0x101e6000 GPIO port 2.
  0x101e7000 GPIO port 3.
  0x101e8000 RTC.
  0x101f0000 Smart card 0.
   0x101f1000 UART0.
   0x101f2000 UART1.
   0x101f3000 UART2.
  0x101f4000 SSPI.

If these devices are located in physical memory then one imagines that
it is possible to control access to these devices by use of virtual
memory.

The range of these registers is well beyond the main memory range of 
0x08000000 and so this eases memory management to some degree.

So back now to the UART device and sending text to the UART device.

It seems that the UART device is able to interact with a DMA device to
copy data from a buffer into it's fifo when the data becomes
available.

=== Found the DMA Channel Description
Date: 2011-12-24 23:40:23 -0800

  http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0287b/ch16s02s04.html

for the versatilepb board. Question is what is the specification for
the Pi?

I guess it is straight forward to reverse engineer the channel number
of the UART by cycling through the channels which different data and
seeing which one comes out the UART.

Since the Pi forums are not forthcoming about the configuration of the
UART I'll presume that if I ever get a Pi that I'll be able to work
out the channels.

This lets me progress with experimenting with the DMA under QEMU.












 




